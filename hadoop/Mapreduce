1. 编写map()函数和reduce()函数时，要确保解决方案是可伸缩的。例如，如果使用了某种数据结构（如List、Array 或 HashMap），而这种数据结构不能方便地存放在商用服务器的内存中，这个解决方案就不具有可伸缩性。
2. 可伸缩性是Mapreduce的核心。在这里，可伸缩性是指“横向扩容”（scaling out），表示在系统中增加更多商用节点。
3. MapReduce的核心概念是江输入数据集映射到一个键值对集合，然后对所有包含相同键的键值对完成规约
4. 从概念上讲，MapReduce的输入是一个记录列表。这些输入记录会划分并传递到集群中的多台服务器，由map()函数使用。map()计算的结果是一个键值对列表。然后reduce()函数取各个包含相同键的值集，将它们分别组合为一个值。
    换句话说，map()函数是由一组数据块生成键值对，reduce()则是组合map()生成的数据输出，从而得到所需要的结果，而不是一组键值对
5. 尽管Hadoop和Spark等框架建立一个“不共享”范式基础上，但它们确实也支持在所有集群节点上共享不可变的数据结构。在Hadoop中国，可以通过Hadoop的Configuration对象将这些值传递给映射器和规约器。除了Broadcast只读对象，Spark还支持只写累加器。
